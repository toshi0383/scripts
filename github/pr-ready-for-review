#!/bin/bash
#
# description:
#   Print URLs of pull-requests which is awaiting for your review

echo "========================================" 1>&2
echo "Deprecated: Use toshi0383/ghaw instead." 1>&2
echo "=> https://github.com/toshi0383/ghaw" 1>&2
echo "========================================" 1>&2

TOKEN=${GITHUB_ACCESS_TOKEN:?"GitHub Personal Access Token is required."}
USER_REPO=$(git remote -v | head -1 | sed -n 's/.*github.com.\(.*\)\.git.*/\1/p')
ME=${1:-$(git config --get user.name)}

TMP_SWIFT=`mktemp`

cat > $TMP_SWIFT << EOF
import Foundation

let stdin = FileHandle.standardInput
let stdout = FileHandle.standardOutput
let stderr = FileHandle.standardError

do {
    let inputData = stdin.readDataToEndOfFile()

    let jsonObject = try JSONSerialization.jsonObject(with: inputData,
                                                      options: [])
                                                      as! [[String: Any]]

    let mapp = jsonObject.reduce([String]()) { (acc: [String], v: [String: Any]) in
        let n = v["number"] as! Int
        if let labels = v["labels"] as? [[String: Any]],
            labels.contains(where: { a in (a["name"] as! String) == "WIP" }) {
            return acc
        } else {
            let milestone = (v["milestone"] as? String) ?? ""
            return acc + ["\(n):\"\(milestone)\""]
        }
    }
    mapp.forEach { a in print(a) }
} catch let error as NSError {
    let message = "error: \(error.localizedDescription)\n"
        stderr.write(message.data(using: .utf8)!)
}
EOF

TMP_NUMBER_MILESTONES=`mktemp`
curl -sS -H "Authorization: token ${TOKEN}" \
    https://api.github.com/repos/${USER_REPO}/pulls?direction=desc \
    | jq "map(select(.user.login != \"${ME}\") | {number, labels, milestone: .milestone.title})" \
    | xcrun swift $TMP_SWIFT \
    > $TMP_NUMBER_MILESTONES

rm $TMP_SWIFT

# echo $NUMBER_MILESTONES

while read it
do
    NUMBER=$(echo $it | awk -F: '{print $1}')
    MILESTONE="$(echo $it | awk -F: '{print $2}')"

    RESULT=$(curl -sS -H "Authorization: token ${TOKEN}" \
        https://api.github.com/repos/${USER_REPO}/pulls/${NUMBER}/reviews \
        | jq "map(select(.user.login == \"${ME}\"))" \
        | jq 'map(.user.login + ":" + .state + ":" + .body |scan(".*APPROVED.*"))' \
        | sed 's/\[//;s/\]//;/^$/d'
    )
    if [ $(echo $RESULT | wc -c) -eq 1 ];then
        echo https://github.com/${USER_REPO}/pull/$NUMBER $MILESTONE
    fi
done < $TMP_NUMBER_MILESTONES

rm $TMP_NUMBER_MILESTONES
